
/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/@sentry/wasm@9.19.0/build/npm/cjs/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */

const IMAGES = [];

/**
 * Returns the extracted meta information from a web assembly module that
 * Sentry uses to identify debug images.
 *
 * @param module
 */
function getModuleInfo(module) {
    const buildIds = WebAssembly.Module.customSections(module, 'build_id');
    let buildId = null;
    let debugFile = null;

    const buildId0 = buildIds[0];
    if (buildId0) {
        const firstBuildId = new Uint8Array(buildId0);
        buildId = Array.from(firstBuildId).reduce((acc, x) => {
            return acc + x.toString(16).padStart(2, '0');
        }, '');
    }

    const externalDebugInfo = WebAssembly.Module.customSections(module, 'external_debug_info');
    const externalDebugInfo0 = externalDebugInfo[0];
    if (externalDebugInfo0) {
        const firstExternalDebugInfo = new Uint8Array(externalDebugInfo0);
        const decoder = new TextDecoder('utf-8');
        debugFile = decoder.decode(firstExternalDebugInfo);
    }

    return { buildId, debugFile };
}

/**
 * Records a module
 */
function registerModule(module, url) {
    const { buildId, debugFile } = getModuleInfo(module);
    if (buildId) {
        console.log("Build ID: " + buildId);
        const oldIdx = getImage(url);
        if (oldIdx >= 0) {
            IMAGES.splice(oldIdx, 1);
        }

        let debugFileUrl = null;
        if (debugFile) {
            try {
                debugFileUrl = new URL(debugFile, url).href;
            } catch {
                // debugFile could be a blob URL which causes the URL constructor to throw
                // for now we just ignore this case
            }
        }

        IMAGES.push({
            type: 'wasm',
            code_id: buildId,
            code_file: url,
            debug_file: debugFileUrl,
            debug_id: `${buildId.padEnd(32, '0').slice(0, 32)}0`,
        });
    }
}

/**
 * Returns all known images.
 */
function getImages() {
    return IMAGES;
}

/**
 * Looks up an image by URL.
 *
 * @param url the URL of the WebAssembly module.
 */
function getImage(url) {
    return IMAGES.findIndex(image => {
        return image.type === 'wasm' && image.code_file === url;
    });
}

function patchWebAssembly() {
    if ('instantiateStreaming' in WebAssembly) {
        const origInstantiateStreaming = WebAssembly.instantiateStreaming;
        WebAssembly.instantiateStreaming = function instantiateStreaming(
            response,
            importObject,
        ) {
            return Promise.resolve(response).then(response => {
                return origInstantiateStreaming(response, importObject).then(rv => {
                    if (response.url) {
                        registerModule(rv.module, response.url);
                    }
                    return rv;
                });
            });
        };
    }

    if ('compileStreaming' in WebAssembly) {
        const origCompileStreaming = WebAssembly.compileStreaming;
        WebAssembly.compileStreaming = function compileStreaming(
            source,
        ) {
            return Promise.resolve(source).then(response => {
                return origCompileStreaming(response).then(module => {
                    if (response.url) {
                        registerModule(module, response.url);
                    }
                    return module;
                });
            });
        };
    }
}

patchWebAssembly();

const INTEGRATION_NAME = "Wasm"
    , _wasmIntegration = () => ({
        name: "Wasm",
        processEvent(e) {
            let t = !1;
            return e.exception?.values && e.exception.values.forEach((e => {
                e.stacktrace?.frames && (t = t || patchFrames(e.stacktrace.frames))
            }
            )),
                t && (e.debug_meta = e.debug_meta || {},
                    e.debug_meta.images = [...e.debug_meta.images || [], ...getImages()]),
                e
        }
    })
    , wasmIntegration = _wasmIntegration
    , PARSER_REGEX = /^(.*?):wasm-function\[\d+\]:(0x[a-fA-F0-9]+)$/;
function patchFrames(e) {
    let t = !1;
    return e.forEach((e => {
        if (!e.filename)
            return;
        const a = e.filename.split("(");
        let r = a[a.length - 1].match(PARSER_REGEX);
        if (r || (r = e.filename.match(PARSER_REGEX)),
            r) {
            const a = getImage(r[1]);
            e.instruction_addr = r[2],
                e.filename = r[1],
                e.platform = "native",
                a >= 0 && (e.addr_mode = `rel:${a}`,
                    t = !0)
        }
    }
    )),
        t
}


window.sentryOnLoad = function () {
    Sentry.init(
        {
            sendDefaultPii: !0,
            release: "Madgine@@MADGINE_VERSION@",
            integrations: [wasmIntegration()],
        })
}

Module.sentry_capture_event = function (message) {
    Sentry.captureMessage(message);
}

!function (n, e, r, t, o, i, a, c, s) { for (var u = s, f = 0; f < document.scripts.length; f++)if (document.scripts[f].src.indexOf(i) > -1) { u && "no" === document.scripts[f].getAttribute("data-lazy") && (u = !1); break } var p = []; function l(n) { return "e" in n } function d(n) { return "p" in n } function _(n) { return "f" in n } var v = []; function y(n) { u && (l(n) || d(n) || _(n) && n.f.indexOf("capture") > -1 || _(n) && n.f.indexOf("showReportDialog") > -1) && L(), v.push(n) } function h() { y({ e: [].slice.call(arguments) }) } function g(n) { y({ p: n }) } function E() { try { n.SENTRY_SDK_SOURCE = "loader"; var e = n[o], i = e.init; e.init = function (o) { n.removeEventListener(r, h), n.removeEventListener(t, g); var a = c; for (var s in o) Object.prototype.hasOwnProperty.call(o, s) && (a[s] = o[s]); !function (n, e) { var r = n.integrations || []; if (!Array.isArray(r)) return; var t = r.map((function (n) { return n.name })); n.tracesSampleRate && -1 === t.indexOf("BrowserTracing") && (e.browserTracingIntegration ? r.push(e.browserTracingIntegration({ enableInp: !0 })) : e.BrowserTracing && r.push(new e.BrowserTracing)); (n.replaysSessionSampleRate || n.replaysOnErrorSampleRate) && -1 === t.indexOf("Replay") && (e.replayIntegration ? r.push(e.replayIntegration()) : e.Replay && r.push(new e.Replay)); n.integrations = r }(a, e), i(a) }, setTimeout((function () { return function (e) { try { "function" == typeof n.sentryOnLoad && (n.sentryOnLoad(), n.sentryOnLoad = void 0) } catch (n) { console.error("Error while calling `sentryOnLoad` handler:"), console.error(n) } try { for (var r = 0; r < p.length; r++)"function" == typeof p[r] && p[r](); p.splice(0); for (r = 0; r < v.length; r++) { _(i = v[r]) && "init" === i.f && e.init.apply(e, i.a) } m() || e.init(); var t = n.onerror, o = n.onunhandledrejection; for (r = 0; r < v.length; r++) { var i; if (_(i = v[r])) { if ("init" === i.f) continue; e[i.f].apply(e, i.a) } else l(i) && t ? t.apply(n, i.e) : d(i) && o && o.apply(n, [i.p]) } } catch (n) { console.error(n) } }(e) })) } catch (n) { console.error(n) } } var O = !1; function L() { if (!O) { O = !0; var n = e.scripts[0], r = e.createElement("script"); r.src = a, r.crossOrigin = "anonymous", r.addEventListener("load", E, { once: !0, passive: !0 }), n.parentNode.insertBefore(r, n) } } function m() { var e = n.__SENTRY__, r = void 0 !== e && e.version; return r ? !!e[r] : !(void 0 === e || !e.hub || !e.hub.getClient()) } n[o] = n[o] || {}, n[o].onLoad = function (n) { m() ? n() : p.push(n) }, n[o].forceLoad = function () { setTimeout((function () { L() })) }, ["init", "addBreadcrumb", "captureMessage", "captureException", "captureEvent", "configureScope", "withScope", "showReportDialog"].forEach((function (e) { n[o][e] = function () { y({ f: e, a: arguments }) } })), n.addEventListener(r, h), n.addEventListener(t, g), u || setTimeout((function () { L() })) }(window, document, "error", "unhandledrejection", "Sentry", 'f374f10cbc10297d79d8b7be16390381', 'https://browser.sentry-cdn.com/8.55.0/bundle.tracing.replay.min.js', { "dsn": "https://f374f10cbc10297d79d8b7be16390381@o4508897651785728.ingest.de.sentry.io/4508897675968592", "tracesSampleRate": 1, "replaysSessionSampleRate": 0.1, "replaysOnErrorSampleRate": 1 }, false);